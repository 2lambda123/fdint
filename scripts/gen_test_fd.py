'''
Uses numerical integration to calculate accurate values to test against.

This should only be run after ``python setup.py build_ext --inplace``.

Note that the ground truth values were calculated in Mathematic 10 using the
following two commands::

    Do[
     Do[
      Print[k, eta, 
       NumberForm[Re[N[-Gamma[k + 1] PolyLog[k + 1, -Exp[eta]], 30]], 30]],
      {eta, -50, 50, 1}],
     {k, -9/2, -1/2, 1}]
    
    Do[
     Do[
      Print[k, eta, 
       NumberForm[Re[N[-Gamma[k + 1] PolyLog[k + 1, -Exp[eta]], 30]], 30]],
      {eta, -50, 50, 1}],
     {k, 0, 21/2, 1/2}]
'''

import os
import sys
sys.path.insert(0,
    os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import fdint
tests_dir = os.path.join(os.path.dirname(__file__), '../fdint/tests/')
templates_dir = os.path.join(os.path.dirname(__file__), 'templates')
true_fdk_path = os.path.join(templates_dir, 'true_fdk.txt')

import numpy

def write_header(f, modname, dependencies=''):
    f.write("""'''
Tests the `{modname}` module.

This file was generated by `scripts/gen_tests.py`. Do not edit this file
directly, or your changes will be lost then next time `gen_tests.py` is run.
'''
# Make sure we import the local package
import os
import sys
sys.path.insert(0,
    os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))
from fdint import {modname}
import unittest
import numpy

RTOL = 1.11e-16*12
""".format(modname=modname))
    f.write(dependencies)
    f.write('\n')
    f.write('class Test_{modname}(unittest.TestCase):\n'
            ''.format(modname=modname.upper()))
    f.write('''
    def assert_rtol(self, a, b, rtol):
        assert rtol >= 0
        rerr = abs(a-b)/a
        if rerr > rtol:
            self.fail('Outside of relative tolerance of {}: {}'
                      ''.format(rtol, rerr))
''')
    f.write('''
    def assert_all_rtol(self, a, b, rtol):
        assert (rtol >= 0).all()
        a = numpy.array(a)
        b = numpy.array(b)
        rtol = numpy.array(rtol)
        rerr = abs(a-b)/a
        if (rerr > rtol).all():
            self.fail('Outside of relative tolerance of {}: {}'
                      ''.format(rtol, rerr))
''')

#################
# Test fd module
modname='fd'
fpath = os.path.join(tests_dir, 'test_{modname}.py'.format(modname=modname))
with open(fpath, 'w') as f:
    mod = getattr(fdint, modname)
    write_header(f, modname)
    with open(true_fdk_path, 'r') as fin:
        i = 0
        for line in fin:
            if not line:
                continue
            i += 1
            k_str, phi_str, true_nu_str = line.split()
            if k_str.endswith('/2'):
                k2 = int(k_str.replace('/2',''))
            else:
                k2 = int(k_str)*2
            k = k2/2.
            k2s = str(k2).replace('/2','').replace('-','m')
            phi = float(phi_str)
            
            fname = '{modname}.fd{k2s}h'.format(modname=modname,k2s=k2s)
            # scalar
            f.write('\n')
            f.write('    def test_{i}_fd{k2s}h(self):\n'.format(k2s=k2s,i=i))
            f.write('        phi = {}\n'.format(phi))
            f.write('        nu = {}(phi)\n'.format(fname))
            f.write('        true_nu = {}\n'
                    .format(true_nu_str))
            f.write('        self.assert_rtol(nu, true_nu, RTOL)\n')
            # vector
            f.write('        vphi = numpy.zeros(2); vphi.fill(phi)\n')
            f.write('        vnu = {}(vphi)\n'.format(fname))
            f.write('        vtrue_nu = numpy.zeros(2); vtrue_nu.fill(true_nu)\n')
            f.write('        vrtol = numpy.zeros(2); vrtol.fill(RTOL)\n')
            f.write('        self.assert_all_rtol(vnu, vtrue_nu, vrtol)\n')
            # buffered vector
            f.write('        vnu = numpy.zeros(2); {}(vphi, vnu)\n'.format(fname))
            f.write('        self.assert_all_rtol(vnu, vtrue_nu, vrtol)\n')

    f.write('\n')
    f.write('if __name__ == "__main__":\n')
    f.write('    unittest.main()')
