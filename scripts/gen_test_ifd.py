# Copyright (c) 2015, Scott J Maddox. All rights reserved.
# Use of this source code is governed by the BSD-3-Clause
# license that can be found in the LICENSE file.
'''
Uses numerical integration to calculate accurate values to test against.

This should only be run after `python setup.py build_ext --inplace`.
'''

import os
import sys
sys.path.insert(0,
    os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
import fdint
tests_dir = os.path.join(os.path.dirname(__file__), '../fdint/tests/')

import numpy

phi = numpy.array([-50,-3,-2,-1,0,1,4,5,7,10,15,20,30,40,50], dtype=float)

def write_header(f, modname, dependencies=''):
    f.write("""# Copyright (c) 2015, Scott J Maddox. All rights reserved.
# Use of this source code is governed by the BSD-3-Clause
# license that can be found in the LICENSE file.

# This file was generated by `scripts/gen_test_ifd.py`.
# Do not edit this file directly, or your changes will be lost.
'''
Tests the `{modname}` module.
'''
# Make sure we import the local package
import os
import sys
sys.path.insert(0,
    os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))
from fdint import {modname}
import unittest
import numpy
import warnings
""".format(modname=modname))
    f.write(dependencies)
    f.write('\n')
    f.write('class Test_{modname}(unittest.TestCase):\n'
            ''.format(modname=modname.upper()))
    f.write('''
    def assertRTOL(self, a, b, RTOL):
        assert RTOL >= 0
        rerr = abs(a-b)/a
        if rerr > RTOL:
            self.fail('Outside of relative tolerance of {}: {}'
                      ''.format(RTOL, rerr))
''')
    f.write('''
    def assert_all_rtol(self, a, b, rtol):
        assert rtol >= 0
        a = numpy.array(a)
        b = numpy.array(b)
        rtol = numpy.array(rtol)
        rerr = abs(a-b)/a
        if (rerr > rtol).all():
            self.fail('Outside of relative tolerance of {}: {}'
                      ''.format(rtol, rerr))
''')

#################
# Test ifd module
modname='ifd'
fpath = os.path.join(tests_dir, 'test_{modname}.py'.format(modname=modname))
with open(fpath, 'w') as f:
    mod = getattr(fdint, modname)
    write_header(f, modname, 'from fdint import fd\n')

    # scalar
    i = 0
    for x in phi:
        i += 1
        # scalar
        f.write('\n')
        f.write('    def test_ifd1h_{i}(self):\n'.format(i=i))
        f.write('        '
                'self.assertRTOL({ifname}({fname}({phi})), {phi}, 1e-14)\n'
                ''.format(ifname='ifd.ifd1h',fname='fd.fd1h',phi=x))

        # vector
        f.write('\n')
        f.write('    def test_vifd1h_{i}(self):\n'.format(i=i))
        f.write('        '
                'self.assert_all_rtol({ifname}({fname}(numpy.array(({phi},)))),\n'
                '        '
                '                     '
                '({phi},), (1e-14,))\n'
                ''.format(ifname='ifd.ifd1h',fname='fd.fd1h',phi=x))

    f.write('\n')
    f.write('if __name__ == "__main__":\n')
    f.write('    unittest.main()')
